

<div class="body">

    <div class="LoginPageContainer">
        <ul>
            <li class="LoginHeaderButtons">
                <button id="newsTab">News</button>
                <button id="historyTab">History</button>
                <button id="friendsTab">Friends</button>
            </li>
        </ul>
        <div class="innerColumn">
            <div class="news">
                @{
                    if (Model.rootObject.appnews.newsitems[0] != null)
                    {
                        DotaBrackets_WEB_2016.Models.Newsitem newsItem = new DotaBrackets_WEB_2016.Models.Newsitem();
                        newsItem = Model.rootObject.appnews.newsitems[0];

                        <div class="newsItem">
                            <ul>
                                <li style="text-align: right; margin-bottom: 1%; color:  #b5f7f3; padding-right: 8%">
                                    @Html.Raw(newsItem.feedlabel)
                                </li>
                                <li class="newsTitle">
                                    <a href="@Html.Raw(newsItem.url)">@Html.Raw(newsItem.title)</a>
                                </li>
                                <li class="newsContent">
                                    @Html.Raw(newsItem.contents)
                                </li>
                                <li>
                                    <a href="@Html.Raw(newsItem.url)">
                                        <button class="readMore">Read More</button>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="newsItem">
                            <ul>
                                <li>
                                    News feed failed to load
                                </li>
                            </ul>
                        </div>
                    }
                }
            </div>

            <div class="matchContainer">
                @{
                    if (Model.gamer.dotaMatch != null)
                    {
                        DotaBrackets_WEB_2016.Models.Match match = new DotaBrackets_WEB_2016.Models.Match();
                        match = Model.gamer.dotaMatch;

                        <div class="match">
                            <ul>
                                <li>
                                   Lobby Type: @match.lobby_type
                                </li>
                                <li>
                                   Match ID: @match.match_id
                                </li>
                                <li>
                                   Players: 
                                    @{ 
                                        foreach (DotaBrackets_WEB_2016.Models.DotaPlayer player in match.dotaPlayers)
                                        {
                                            <li>
                                                Account ID: @player.account_id
                                            </li>
                                            <li>
                                                Hero: @player.hero_id
                                            </li>
                                        }
                                     }
                                </li>
                            </ul>
                        </div>
                                        }
                                        else
                                        {
                        <div class="match">
                            <ul>
                                <li>
                                    Match history failed to load
                                </li>
                            </ul>
                        </div>
                                        }
                }
            </div>

            <div class="friendsContainer">
                @{
                    <button id="refresh">Refresh</button>

                    if (Model.gamer.friendsList.friendsList != null && Model.gamer.friendsList.friendsList.Count > 0)
                    {
                        DotaBrackets_WEB_2016.Models.FriendsList friendsList = new DotaBrackets_WEB_2016.Models.FriendsList();
                        friendsList = Model.gamer.friendsList;

                        <div class="friends">
                            
                            <p>
                                Username
                            </p>
                            <p>
                                Dota ID
                            </p>
                            <ul id="friendsUL">
                                @{ foreach (DotaBrackets_WEB_2016.Models.FriendID friend in friendsList.friendsList)
                                    {
                                        <li>
                                           @friend.userName
                                        </li>
                                        <li>
                                           @friend.dota2ID
                                        </li>
                                    }
                                }
                            </ul>
                        </div> 
                    }
                    else
                    {
                        <div class="friends">
                            <ul>
                                <li>
                                    You have no friends
                                </li>
                            </ul>
                        </div>
                    }
                }
            </div>

            <div class="friends">

            </div>
        </div>
    </div>

    <div class="rightCol" id="chatContainer">


        <ul class="rightColUL">
            <li class="startSearchingLi">
                Start Searching
            </li>
            <li>
                <button id="btnSearch">Search</button>
                <button id="btnStopSearching">Stop Searching</button>
            </li>
        </ul>

        <div class="searchBoxDiv">
            <ul class="searchBoxUL">
                <li class="searchBoxHead">
                    Party Members:
                </li>
                <li class="searchBoxSubHead" id="sbsh">
                    UserName
                </li>
                <li class="searchBoxSubHead">
                    Dota ID
                </li>
            </ul>

            <div id="partyMembers"> </div>
        </div>

        <div class="FriendAdded">
            Friend Added!
        </div>
        <div class="FriendExists">
            You already have this friend!
        </div>
       
        <div class="chatRoom">
            <li id="name">@Model.gamer.userName</li>
            <div id="divChat"></div>
            <input type="text" id="msg" />
            <input type="button" id="btnSend" value="Send" />
        </div>
        <div class="searchEnd">
            <p>hidden</p>
        </div>
    </div>

    <div>
        <div style="visibility: hidden" id="groupName"></div>
    </div>

</div>



@section scripts
{
<script src="~/signalr/hubs"></script>
    <script type="text/javascript">

        var data;

        $(document).ready(function () {
            //displays and hides tabs in left column of page
            $(".matchContainer").hide();
            $(".friendsContainer").hide();
            $("#newsTab").click(function () {
                $(".news").show();
                $(".matchContainer").hide();
                $(".friendsContainer").hide();
            });
            $("#historyTab").click(function () {
                $(".news").hide();
                $(".matchContainer").show();
                $(".friendsContainer").hide();
            });
            $("#friendsTab").click(function () {
                $(".news").hide();
                $(".matchContainer").hide();
                $(".friendsContainer").show();
            });

            var _name = $("#name").text();
            $("#name").text(_name);
            $("#msg").val('');

            //connects the hub and the client
            var chatProxy = $.connection.signalRChatHub;

            data = @Html.Raw(Json.Encode(Model.gamer));
            data = JSON.stringify(data);

            $.connection.hub.start().done(function () {

                //starts search and puts client in a group. Calls controller to change 'isSearching' to true
                $("#btnSearch").click(function () {
                    chatProxy.server.joinGroup(data);
                    $.post('@Url.Action("StartSearching", "SignalRGroups")', { incData: data }, function (returnData) {
                        data = returnData;
                    });
                });

                //stops search and removes client from group. Calls controller to change 'isSearching' to false
                $("#btnStopSearching").click(function () {
                    chatProxy.server.leaveGroup(data);
                    $.post('@Url.Action("StopSearching", "SignalRGroups")', {incData: data }, function (returnData) {
                        data = returnData;
                    });
                    $("#partyMembers").html('');
                    $("#groupName").html('');
                });

                //button to send a message to the chatroom
                $("#btnSend").click(function () {
                    chatProxy.server.broadCastGroupMessage($("#name").text(), $("#msg").val(), $("#groupName").text());
                    $("#msg").val('').focus();
                });
            });

            //recieves messages in group chat to the chatroom
            chatProxy.client.addChatMessage = function (msgFrom, msg) {
                $("#divChat").append('<li><strong>' + msgFrom + '</strong>:&nbsp;&nbsp;' + msg + '</li>')
            };

            //adds the name of the connected clients group to a hidden field on the page
            chatProxy.client.addContosoChatMessageToPage = function (groupName) {
                $("#groupName").append('<li>'+ groupName + '</li>')
            };
       
            //adds matched party members to the page
            chatProxy.client.recievePartyMember = function (thisGroup) {
                $('#partyMembers').empty();
                thisGroup.members.forEach(function (member) {
                    $("#partyMembers").append('<div><p>' + member.userName + '</p>' + '<p>' + member.dota2ID + '</p>'
                        + "<input type='button' class='addFriendButton' id='"+member.dota2ID +"' onClick='return addToFriendsList(this)' friendName='"+member.userName+"' value='&#10004;' />");
                })
            };
        });

        var friendsListReturned;
        var friendsListObject;
        //adds a friend to your friends list if you click add friend
        function addToFriendsList(current) {
            $.post('@Url.Action("addFriend", "Account")', {incData: data, dota2ID: current.id, friendUserName: current.attributes["friendName"].value }, function (returnData) {
                friendsListObject = JSON.parse(returnData);
                if(friendsListObject.userName != null)
                {
                    $("#friendsUL").append('<li>' + friendsListObject.userName +'</li><li>' +friendsListObject.dota2ID + '</li>');
                    $(".FriendAdded").show();
                    setTimeout(function() { $(".FriendAdded").hide(); }, 3000); 
                }
                else
                {
                    $(".FriendExists").show();
                    setTimeout(function() { $(".FriendExists").hide(); }, 3000);
                }
            });            
        };
        //refreshes the friends page on refresh button click
        $("#refresh").click( function () {
            $.post('@Url.Action("refreshFriends", "Account")', { incData: data }, function (returnData) {
                friendsListObject = JSON.parse(returnData);
                if(friendsListObject != null)
                {
                    $('#friendsUL').empty();
                }
                friendsListObject.forEach( function (entry) {
                    $("#friendsUL").append('<li>' + entry.userName +'</li><li>' +entry.dota2ID + '</li>');
                });
            });
        });
    </script>    
}

